'use client';

import { useState, useEffect } from 'react';
import Layout from '../../components/Layout';
import { Icons } from '../../utils/Icons';
import ShippingLabel from '../../components/ShippingLabel';

// SipariÅŸ tipi tanÄ±mla
interface Order {
  id: string;
  customerName: string;
  orderDate: string;
  products: {
    id?: string;
    code: string;
    name: string;
    quantity: number;
    image?: string;
  }[];
  totalAmount: number;
  status: string;
}

export default function SiparisTakipPage() {
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
  const [isDetailOpen, setIsDetailOpen] = useState(false);
  const [orders, setOrders] = useState<Order[]>([]);
  const [isShippingLabelOpen, setIsShippingLabelOpen] = useState(false);
  const [shippingLabelData, setShippingLabelData] = useState<{ order: Order; customer: { name: string; address: string; phone: string } } | null>(null);
  const [currentUser, setCurrentUser] = useState<{ type: string } | null>(null);
  
  // KullanÄ±cÄ± bilgisini yÃ¼kle - Layout ile aynÄ± sistem
  useEffect(() => {
    const loggedUserJson = localStorage.getItem('loggedUser');
    if (loggedUserJson) {
      const user = JSON.parse(loggedUserJson);
      setCurrentUser(user);
    }
  }, []);

  // API'den sipariÅŸ verileri yÃ¼kle
  useEffect(() => {
    const fetchOrders = async () => {
      try {
        // ğŸ”’ GÃœVENLÄ°K KONTROLÃœ: GiriÅŸ yapÄ±lmÄ±ÅŸ kullanÄ±cÄ± yoksa hiÃ§bir ÅŸey gÃ¶sterme
        if (!currentUser) {
          console.log('ğŸš« GiriÅŸ yapÄ±lmamÄ±ÅŸ - sipariÅŸ verileri yÃ¼klenmiyor');
          setOrders([]);
          return;
        }

        // MÃ¼ÅŸteri tipine gÃ¶re API URL'ini oluÅŸtur
        let apiUrl = '/api/orders';
        
        if (currentUser.type === 'customer') {
          // MÃ¼ÅŸteri ise sadece kendi sipariÅŸlerini getir
          const customerId = currentUser.id;
          apiUrl = `/api/orders?customerId=${customerId}`;
          console.log('ğŸ”’ MÃ¼ÅŸteri izolasyonu: Sadece kendi sipariÅŸleri getiriliyor:', customerId);
        } else if (currentUser.type === 'admin') {
          console.log('ğŸ‘‘ Admin: TÃ¼m sipariÅŸler getiriliyor');
        } else {
          // TanÄ±mlanmamÄ±ÅŸ kullanÄ±cÄ± tipi
          console.log('ğŸš« TanÄ±mlanmamÄ±ÅŸ kullanÄ±cÄ± tipi - eriÅŸim reddedildi');
          setOrders([]);
          return;
        }
        
        const response = await fetch(apiUrl);
        
        if (!response.ok) {
          console.error('API YanÄ±t DetaylarÄ±:', {
            status: response.status,
            statusText: response.statusText
          });
          const errorData = await response.text();
          console.error('API Hata DetayÄ±:', errorData);
          throw new Error(`API hatasÄ±: ${response.status} ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('API YanÄ±tÄ±:', data); // Debug iÃ§in
        
        // Veri kontrolÃ¼ ve dÃ¶nÃ¼ÅŸÃ¼mÃ¼
        if (Array.isArray(data)) {
          const formattedOrders = data.map(order => ({
            id: order.id || '',
            customerName: order.customerName || '',
            orderDate: order.orderDate || '',
            products: Array.isArray(order.products) ? order.products : [],
            totalAmount: typeof order.totalAmount === 'number' ? order.totalAmount : 0,
            status: order.status || 'Belirsiz'
          }));
          setOrders(formattedOrders);
        } else {
          console.warn('API yanÄ±tÄ± dizi formatÄ±nda deÄŸil:', data);
          setOrders([]);
        }
      } catch (error) {
        console.error('SipariÅŸleri getirme hatasÄ±:', error);
        setOrders([]);
      }
    };
    
    fetchOrders();
  }, [currentUser]); // currentUser deÄŸiÅŸtiÄŸinde yeniden fetch et
  
  // Arama ve filtreleme
  const filteredOrders = orders.filter(order => {
    const searchMatch = 
      order.id.toString().toLowerCase().includes(searchTerm.toLowerCase()) ||
      order.customerName.toLowerCase().includes(searchTerm.toLowerCase());
    
    const statusMatch = statusFilter === '' || order.status === statusFilter;
    
    return searchMatch && statusMatch;
  });
  
  // SipariÅŸ durumu renklerini belirle
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Onay Bekliyor':
        return 'bg-warning/10 text-warning';
      case 'Ãœretimde':
        return 'bg-primary/10 text-primary';
      case 'Ãœretildi':
        return 'bg-accent/10 text-accent';
      case 'HazÄ±rlanÄ±yor':
        return 'bg-muted text-muted-foreground';
      case 'HazÄ±rlandÄ±':
        return 'bg-success/10 text-success';
      default:
        return 'bg-muted text-muted-foreground';
    }
  };
  
    // SipariÅŸ detaylarÄ±nÄ± gÃ¶ster
  const handleShowDetails = (order: Order) => {
    setSelectedOrder(order);
    setIsDetailOpen(true);
  };
  
  // SipariÅŸ sil
  const handleDeleteOrder = async (orderId: string) => {
    if (window.confirm('Bu sipariÅŸi silmek istediÄŸinizden emin misiniz?')) {
      try {
        // SipariÅŸi API'den sil
        const response = await fetch(`/api/orders?id=${orderId}`, {
          method: 'DELETE',
        });
        
        if (!response.ok) {
          throw new Error(`API hatasÄ±: ${response.status} ${response.statusText}`);
        }
        
        // State'i gÃ¼ncelle
        const updatedOrders = orders.filter(order => order.id !== orderId);
        setOrders(updatedOrders);
        
        if (selectedOrder && selectedOrder.id === orderId) {
          setIsDetailOpen(false);
        }
      } catch (error) {
        console.error('SipariÅŸ silinirken hata:', error);
        alert('SipariÅŸ silinirken bir hata oluÅŸtu!');
      }
    }
  };

  // Sevkiyat belgesi yazdÄ±r (sadece admin)
  const handlePrintShippingLabel = async (orderId: string) => {
    try {
      const response = await fetch(`/api/orders/${orderId}/invoice`);
      
      if (!response.ok) {
        throw new Error(`API hatasÄ±: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      setShippingLabelData(data);
      setIsShippingLabelOpen(true);
    } catch (error) {
      console.error('Sevkiyat belgesi verileri alÄ±nÄ±rken hata:', error);
      alert('Sevkiyat belgesi oluÅŸturulurken bir hata oluÅŸtu!');
    }
  };
  
  // GiriÅŸ yapÄ±lmamÄ±ÅŸsa uyarÄ± gÃ¶ster
  if (!currentUser) {
    return (
      <Layout>
        <div className="space-y-5 w-full">
          <div className="flex justify-between items-center">
            <h1 className="text-xl font-bold">SipariÅŸ Takip</h1>
          </div>
          
          <div className="bg-destructive/10 border border-destructive/20 rounded-lg p-6 text-center">
            <div className="flex justify-center mb-4">
              <Icons.UserIcon className="w-16 h-16 text-destructive" />
            </div>
            <h2 className="text-xl font-semibold text-destructive mb-2">EriÅŸim Reddedildi</h2>
            <p className="text-muted-foreground mb-4">
              SipariÅŸ bilgilerinizi gÃ¶rÃ¼ntÃ¼lemek iÃ§in giriÅŸ yapmanÄ±z gerekiyor.
            </p>
            <p className="text-sm text-muted-foreground">
              LÃ¼tfen admin tarafÄ±ndan verilen kullanÄ±cÄ± adÄ± ve ÅŸifre ile giriÅŸ yapÄ±n.
            </p>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div className="space-y-5 w-full">
        <div className="flex justify-between items-center">
          <h1 className="text-xl font-bold">SipariÅŸ Takip</h1>
        </div>
        
        <div className="bg-card border border-border rounded-lg p-4 mb-6">
          <div className="flex flex-col sm:flex-row gap-4 items-center">
            <div className="search-container flex-grow">
              <Icons.SearchIcon className="search-icon" />
              <input
                type="text"
                placeholder="SipariÅŸ veya mÃ¼ÅŸteri ara..."
                className="w-full px-3 py-2 rounded-lg border border-border bg-background focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            <div className="flex items-center gap-2">
              <label className="text-sm font-medium text-muted-foreground whitespace-nowrap">Durum:</label>
              <select 
                className="min-w-[140px] px-3 py-2 rounded-lg border border-border bg-background focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
              >
                <option value="">TÃ¼m Durumlar</option>
                <option value="Onay Bekliyor">Onay Bekliyor</option>
                <option value="Ãœretimde">Ãœretimde</option>
                <option value="Ãœretildi">Ãœretildi</option>
                <option value="HazÄ±rlanÄ±yor">HazÄ±rlanÄ±yor</option>
                <option value="HazÄ±rlandÄ±">HazÄ±rlandÄ±</option>
              </select>
            </div>
          </div>
        </div>
        
        <div className="w-full overflow-x-auto">
          <table className="data-table">
            <thead>
              <tr>
                <th>SipariÅŸ No</th>
                <th>MÃ¼ÅŸteri</th>
                <th>Tarih</th>
                <th>Tutar</th>
                <th>Durum</th>
                <th className="text-right">Ä°ÅŸlemler</th>
              </tr>
            </thead>
            <tbody>
              {filteredOrders.length > 0 ? (
                filteredOrders.map((order) => (
                  <tr key={order.id}>
                    <td className="font-medium">{order.id}</td>
                    <td>{order.customerName}</td>
                    <td>{order.orderDate}</td>
                    <td>{order.totalAmount}â‚º</td>
                    <td>
                      <span className={`status-badge ${getStatusColor(order.status)}`}>
                        {order.status}
                      </span>
                    </td>
                    <td>
                      <div className="flex gap-2 justify-end">
                        <button 
                          onClick={() => handleShowDetails(order)}
                          className="action-btn action-btn-view"
                          title="Detaylar"
                        >
                          Detaylar
                        </button>
                        {/* YazdÄ±r butonu sadece admin iÃ§in */}
                        {currentUser?.type === 'admin' && (
                          <button 
                            onClick={() => handlePrintShippingLabel(order.id)}
                            className="action-btn action-btn-primary"
                            title="Sevkiyat Belgesi YazdÄ±r"
                          >
                            <Icons.PrinterIcon />
                          </button>
                        )}
                        <button 
                          onClick={() => handleDeleteOrder(order.id)}
                          className="action-btn action-btn-delete"
                          title="Sil"
                        >
                          <Icons.TrashIcon />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan={6} className="py-8 text-center text-muted-foreground">
                    SipariÅŸ bulunamadÄ±.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
      
      {/* SipariÅŸ Detay ModalÄ± */}
      {selectedOrder && isDetailOpen && (
        <div className="modal">
          <div className="modal-content max-w-2xl">
            <div className="modal-header">
              <h2 className="text-lg font-semibold">SipariÅŸ DetayÄ± - {selectedOrder.id}</h2>
              <button onClick={() => setIsDetailOpen(false)} className="text-muted-foreground hover:text-foreground">
                &times;
              </button>
            </div>
            
            <div className="modal-body">
              <div className="grid grid-cols-2 gap-6 mb-6">
                <div>
                  <h3 className="text-lg font-medium mb-2">SipariÅŸ Bilgileri</h3>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">MÃ¼ÅŸteri:</span>
                      <span>{selectedOrder.customerName}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Tarih:</span>
                      <span>{selectedOrder.orderDate}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Toplam Tutar:</span>
                      <span>{selectedOrder.totalAmount}â‚º</span>
                    </div>
                  </div>
                </div>
                
                <div>
                  <h3 className="text-lg font-medium mb-2">Durum Bilgisi</h3>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">SipariÅŸ Durumu:</span>
                      <span className={`status-badge ${getStatusColor(selectedOrder.status)}`}>
                        {selectedOrder.status}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="mt-6">
                <h3 className="text-lg font-medium mb-2">SipariÅŸ ÃœrÃ¼nleri</h3>
                <div className="overflow-hidden border border-border rounded-md">
                  <table className="w-full">
                    <thead className="bg-muted text-left">
                      <tr>
                        <th className="py-2 px-4 font-medium">ÃœrÃ¼n Kodu</th>
                        <th className="py-2 px-4 font-medium">ÃœrÃ¼n AdÄ±</th>
                        <th className="py-2 px-4 font-medium">Adet</th>
                      </tr>
                    </thead>
                    <tbody>
                      {selectedOrder.products && selectedOrder.products.length > 0 ? (
                        selectedOrder.products.map((product, index) => (
                          <tr key={index} className="border-t border-border">
                            <td className="py-2 px-4">{product.code}</td>
                            <td className="py-2 px-4">{product.name}</td>
                            <td className="py-2 px-4">{product.quantity}</td>
                          </tr>
                        ))
                      ) : (
                        <tr>
                          <td colSpan={3} className="py-4 text-center text-muted-foreground">
                            ÃœrÃ¼n bulunamadÄ±.
                          </td>
                        </tr>
                      )}
                    </tbody>
                  </table>
                </div>
              </div>
              
                            <div className="modal-footer mt-6">
                <button
                  onClick={() => setIsDetailOpen(false)}
                  className="btn-primary"
                >
                  Kapat
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Sevkiyat Belgesi ModalÄ± */}
      {isShippingLabelOpen && shippingLabelData && (
        <ShippingLabel
          orderData={shippingLabelData}
          onClose={() => {
            setIsShippingLabelOpen(false);
            setShippingLabelData(null);
          }}
        />
      )}
    </Layout>
  );
} 